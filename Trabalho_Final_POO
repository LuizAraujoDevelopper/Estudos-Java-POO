
import java.util.ArrayList;
import java.util.Collections;
import java.util.ArrayList;
import java.util.LinkedList;


public class MyClass {
    public static void main(String args[]) {
     // Add autores
	Autor autor1 = new Autor("Luiz Borges", "luiz.borges@example.com", "UFRJ");
	Autor autor2 = new Autor("Maria Clara", "maria.clara@example.com", "PUC-SP");
	Autor autor3 = new Autor("Carlos Almeida", "carlos.almeida@example.com", "UNESP");
	Autor autor4 = new Autor("Ana Paula", "ana.paula@example.com", "UFPE");
	Autor autor5 = new Autor("Roberto Silva", "roberto.silva@example.com", "UFMG");
	Autor autor6 = new Autor("Julia Santos", "julia.santos@example.com", "UFRGS");
	Autor autor7 = new Autor("Fernando Costa", "fernando.costa@example.com", "UFC");
	Autor autor8 = new Autor("Mariana Oliveira", "mariana.oliveira@example.com", "USP");
	Autor autor9 = new Autor("Ricardo Pereira", "ricardo.pereira@example.com", "UFPR");
	Autor autor10 = new Autor("Patricia Lima", "patricia.lima@example.com", "UFG");
	Autor autor11 = new Autor("Gabriel Mendes", "gabriel.mendes@example.com", "UFSC");
	Autor autor12 = new Autor("Helena Souza", "helena.souza@example.com", "UNIFESP");


     // Add livro físico e autor
     	Livro_fisico livroFisico1 = new Livro_fisico("A Jornada", "ISBN001", 45.00);
        Livro_fisico livroFisico2 = new Livro_fisico("O Resgate", "ISBN002", 55.00);
        Livro_fisico livroFisico3 = new Livro_fisico("O Segredo", "ISBN003", 65.00);
        Livro_fisico livroFisico4 = new Livro_fisico("A Missão", "ISBN004", 75.00);
        Livro_fisico livroFisico5 = new Livro_fisico("A Descoberta", "ISBN005", 85.00);
        Livro_fisico livroFisico6 = new Livro_fisico("O Enigma", "ISBN006", 95.00);
     
     livroFisico1.add_Autor(autor8);
     livroFisico2.add_Autor(autor1);
     livroFisico3.add_Autor(autor10);
     livroFisico4.add_Autor(autor8);
     livroFisico5.add_Autor(autor4);
     livroFisico6.add_Autor(autor5);
     
     
     
     // Add Ebook e autor
      	Ebook ebook1 = new Ebook("Aventura Digital", "EISBN001", 20.00);
        Ebook ebook2 = new Ebook("Tecnologia e Futuro", "EISBN002", 30.00);
        Ebook ebook3 = new Ebook("Desvendando a Programação", "EISBN003", 40.00);
        Ebook ebook4 = new Ebook("O Universo da IA", "EISBN004", 50.00);
        Ebook ebook5 = new Ebook("Redes e Sistemas", "EISBN005", 60.00);
        Ebook ebook6 = new Ebook("Segurança da Informação", "EISBN006", 70.00);
     
     
     
     ebook1.add_Autor(autor3);
     ebook2.add_Autor(autor6);
     ebook3.add_Autor(autor7);
     ebook4.add_Autor(autor6);
     ebook5.add_Autor(autor9);
     ebook6.add_Autor(autor12);

     // Add biblioteca e livros
     Biblioteca biblioteca = new Biblioteca();
     biblioteca.add_Livro_fisico(livroFisico1);
     biblioteca.add_Livro_fisico(livroFisico2);
     biblioteca.add_Livro_fisico(livroFisico3);
     biblioteca.add_Livro_fisico(livroFisico4);
     biblioteca.add_Livro_fisico(livroFisico5);
     biblioteca.add_Livro_fisico(livroFisico6);
     
     biblioteca.add_Livro_Ebook(ebook1);
     biblioteca.add_Livro_Ebook(ebook2);
     biblioteca.add_Livro_Ebook(ebook3);
     biblioteca.add_Livro_Ebook(ebook4);
     biblioteca.add_Livro_Ebook(ebook5);
     biblioteca.add_Livro_Ebook(ebook6);

     // Emprestando e devolvendo livros
     biblioteca.emprestarLivro_fisico(livroFisico1);
     biblioteca.emprestarLivro_fisico(livroFisico2);
     biblioteca.emprestarLivro_fisico(livroFisico3);
     
     System.out.println("EMPRESTADOS >>>>");
     biblioteca.mostrar_LivrosEmprestados();
     System.out.println("\nLIVRO DEVOLVIDO >>>>");
     biblioteca.devolverLivro(livroFisico1);

     System.out.println("\nTODOS LIVROS FISICOS >>>>");
     
     // Imprimindo todos os livros fisicos da biblioteca
     biblioteca.mostrar_Livros();
     
     System.out.println("\nTODOS OS EBOOKS >>>>\n");
  // Imprimindo todos os ebooks da biblioteca
     biblioteca.mostrar_Ebook();

     // Add orçamentos e add pedidos
     Orcamento orcamento = new Orcamento();
     orcamento.add_Livro_fisicoOrc(livroFisico1);
     orcamento.add_LivroEbookOrc(ebook1);
     orcamento.add_LivroEbookOrc(ebook4);
     
     // Pedidos de compra
     System.out.println("\nORÇAMENTO >>>>\n");
     orcamento.mostrar_Pedidos();
    }
}


//Interfaces

//valida
interface Validar {
	boolean validar_email(String email);
}

//Compra
interface Compra {
	double calcular_Preco();
}

//Autor
class Autor implements Validar {
	
 private String nome;
 private String email;
 private String instituicao;
	
 public Autor(String nome, String email, String instituicao) {
 	if(validar_email(email)) {
 		this.nome = nome;
         this.email = email;
         this.instituicao = instituicao;
 	}
 	else {
 		System.out.println("Favor informe um e-mail válido.");
 	}
 }
	
 @Override
 public boolean validar_email(String email) {
     String emailRegex = "^[a-zA-Z0-9_+&-]+(?:\\.[a-zA-Z0-9_+&-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
     return email.matches(emailRegex);
     
 }
 @Override
 public String toString() {
     return "Autor: " + nome;
 }

}

//classes

//biblioteca

class Biblioteca {
 private ArrayList<Livro_fisico> livros;
 private ArrayList<Ebook> Ebooks;
 private ArrayList<Livro_fisico> emprestados;
 private ArrayList<Ebook> EbooksEmprestados;

 public Biblioteca() {
     this.livros = new ArrayList<>();
     this.Ebooks = new ArrayList<>();
     this.emprestados = new ArrayList<>();
 }

 public void add_Livro_fisico(Livro_fisico livro) {
     this.livros.add(livro);
 }
 public void add_Livro_Ebook(Ebook Ebook) {
     this.Ebooks.add(Ebook);
 }

 public void emprestarLivro_fisico(Livro_fisico livro) {
     if (this.livros.contains(livro) && !this.emprestados.contains(livro)) {
         this.emprestados.add(livro);
     }
 }
 public void emprestarEbook(Ebook Ebook) {
     if (this.Ebooks.contains(Ebook) && !this.EbooksEmprestados.contains(Ebook)) {
         this.EbooksEmprestados.add(Ebook);
     }
 }

 public void devolverLivro(Livro livro) {
     this.emprestados.remove(livro);
 }

 public void mostrar_Livros() {
     Collections.sort(this.livros, (l1, l2) -> l1.titulo.compareTo(l2.titulo));
     for (Livro livro : this.livros) {
         System.out.println(livro);
     }
 }
 
 public void mostrar_Ebook() {
     Collections.sort(this.livros, (l1, l2) -> l1.titulo.compareTo(l2.titulo));
     for (Ebook ebook : this.Ebooks) {
         System.out.println(ebook);
     }
 }
 
 public void mostrar_LivrosEmprestados() {
 	for(Livro emprestado: this.emprestados) {
 		System.out.println(emprestado);
 	}
 }
}

//Ebook
class Ebook extends Livro implements Comparable<Ebook> {
 private double preco;
 

 public Ebook(String titulo, String isbn, double preco) {
     super(titulo, isbn);
     this.preco = preco;
 }

 @Override
 public double getPreco() {
     return this.preco;
 }

 @Override
 public int compareTo(Ebook outro) {
     return this.titulo.compareTo(outro.titulo);
 }

 @Override
 public String toString() {
     return "Ebook: " + titulo + ", ISBN: " + isbn + ", Preço: " + preco;
 }
}

//livro


abstract class Livro {
	protected String titulo;
 protected String isbn;
 protected ArrayList<Autor> autores;
 
 public Livro(String titulo, String isbn) {
 	this.titulo= titulo;
 	this.isbn = isbn;
 	this.autores = new ArrayList<>()  ;  
 }
 
 public void add_Autor(Autor autor) {
     this.autores.add(autor);
 }
 
 public abstract double getPreco();
 
}

//Livro_fisico
class Livro_fisico extends Livro implements Comparable<Livro_fisico> {
 private double preco;

 public Livro_fisico(String titulo, String isbn, double preco) {
     super(titulo, isbn);
     this.preco = preco;
 }

 @Override
 public double getPreco() {
     return this.preco;
 }

 @Override
 public int compareTo(Livro_fisico outro) {
     return this.titulo.compareTo(outro.titulo);
 }

 @Override
 public String toString() {
     return "Livro Físico: " + titulo + ", ISBN: " + isbn + ", Preço: " + preco+ " "+autores;
 }
}

//orcamento


class Orcamento implements Compra {
 private LinkedList<Livro> pedido;

 public Orcamento() {
     this.pedido = new LinkedList<>();
 }

 public void add_Livro_fisicoOrc(Livro_fisico livro) {
     this.pedido.add(livro);
 }
 public void add_LivroEbookOrc(Ebook Ebook) {
     this.pedido.add(Ebook);
 }

 @Override
 public double calcular_Preco() {
     double total = 0;
     for (Livro livro : this.pedido) {
         total += livro.getPreco();
     }
     return total;
 }

 public void mostrar_Pedidos() {
     for (Livro livro : this.pedido) {
         System.out.println(livro);
     }
     System.out.println("Total do pedido: R$" + calcular_Preco());
 }
}
